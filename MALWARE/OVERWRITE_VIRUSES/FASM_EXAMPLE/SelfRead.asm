;
;     FASM - SELF READ
;      Self Reading to memory.
;     FROM VIDEO:
;	   https://www.youtube.com/watch?v=lsSmEvai3jY
;
;     DO NOT USE THIS CODE !
;
;     0xD3struction
;
;    2o23



format PE Console
include 'win32a.inc'
entry Self_Read_Start

section '.data' data readable writable
        Prtf db '[0xD3struction]',10,'File Path: %s ',10,10,0
        self_ok db '[+] VIRUS READED !',10,10,0
        printf_m db 'VIR[0] = %c',10,0
        printf_z db 'VIR[1] = %c',10,0
        Sys_arg db 'pause',0
        VirusSize dd 0x00000800 
        VirusBuffer dd 0x00000000
        VirHand dd 0x00000000
        BytesReaded dd ?

section '.code' code readable executable
        

     SelfRead:
                                
               push 0x00                                               ;/
               push FILE_ATTRIBUTE_NORMAL                              ;|
               push OPEN_EXISTING                                      ;|
               push 0x00                                               ;|
               push FILE_SHARE_READ                                    ;|
               push GENERIC_READ                                       ;|
               push ecx                                                ;|
               call [CreateFileA]                                      ;|
                                                                       ;|
               mov dword [VirHand],eax                                 ;|
                                                                       ;|
               test eax,eax                                            ;|
                je SelfReadEnd       ;\[C]: if(!(VirHand=CreateFileEx(*namePtr /*ECX*/,GENERIC_READ,...,FILE_ATTRIBUTE_NORMAL,0))) goto SelfEndFun; [/C]
                                                                
               push dword [VirusSize]                                  ;/
               call [malloc]                                           ;|
               add esp,4                                               ;|
                                                                       ;|
               cmp eax,0                                               ;|
               je SelfReadEnd                                          ;\[C]: if(!malloc(VirusSize)) return 0; [/C]        
                                                                
               mov dword [VirusBuffer],eax                             ; Saving alocated memmory pointer to VirusBuffer var.
                                                                
               push 0x00                                               ;/
               push dword BytesReaded                                  ;|
               push dword [VirusSize]                                  ;|
               push eax                                                ;|
               push dword [VirHand]                                    ;|
               call [ReadFile]                                         ;|
                                                                       ;|                
               cmp eax,0                                               ;|
               je SelfReadEnd                                          ;\[C]: if(!Readfile(VirHandle,*ptrToMem(EAX),VirusSize,&BytesReaded,0)) goto SelfEndRead; /*return 0;*/;
                                                                
               mov ecx,dword [BytesReaded]                             ;ECX = BytesReaded
               mov ebx,dword [VirusSize]                               ;EBX = VirusSize
                                                                
               cmp ecx,ebx                                                     
               jne SelfReadEnd                                         ;[C] if(ecx!=ebx) goto SelfReadEnd;
                                                                
               push dword [VirHand]
               call [CloseHandle]                                      ;[C] CloseHandle(VirHand)
                                
                                                                
              xor eax,eax
              inc eax                                                 ; eax = 1;
              jmp short SelfReadEnd2
                                                                
     SelfReadEnd:
              xor eax,eax                                             ; eax = 0;
     SelfReadEnd2:
                                
              ret                                                     ; return EAX(0 or 1)


Self_Read_Start:
                push ebp                          ; STACK FRAME : for local vars
                mov ebp,esp                       ;
                sub esp,0xc                       ; 
                                                      
                call [GetCommandLineA]            ;[C] GetCommandLine()
                mov [ebp-4],eax                                   ;saving offset to 


                cmp byte[eax],0x22                
                jne No_Quote                      
                inc eax                           

                push eax                          
                call [strlen]                     
                add esp,4                         
                                                  
                dec eax                           
                add ecx,eax                       
                mov byte [ecx],0x00               
                sub ecx,eax                       

                mov [ebp-4],ecx                   
     No_Quote:
                push dword [ebp-4]                
                push Prtf                         
                call [printf]                     ; [C] printf("[0xD3struction] \n File Path: %s \n\n",[ebp-4]);
                add esp,8                         
               
                mov ecx,dword[ebp-4]              ; ECX = Path File
                call SelfRead                     ; SelfRead()
                                
                cmp eax,0                         ; [C] : if(!SelfRead()) return 0;
                je EndFun
                                
                                
                push self_ok                  
                call [printf]                     ; printf("[+] VIRUS READED !\n\n");
                add esp,4
                                
                mov dword ebx,[VirusBuffer]               
                push dword [ebx]
                push printf_m
                call [printf]                     ; [C] printf("VIR[0] = %c \n",VirusBuffer[0]);
                add esp,8
                                
                push dword [ebx+1]
                push printf_z
                call [printf]                     ; [C] printf("VIR[1] = %c \n",VirusBuffer[0]);
                add esp,8
                                
                push Sys_arg
                call [system]                     ; [C] system("pause");
                add esp,4
                                
        EndFun:
                mov eax,0                                                 

                add esp,0xC                       ; correcting stack
                pop ebp                           ;
                ret                               ; return 0 or 1 (EAX)
                                
                                
                                
section '.idata' import data readable writeable

   library kernel,'KERNEL32.DLL',msvcrt,'MSVCRT.DLL'

   import msvcrt,\
                  printf,'printf',\
                  malloc,'malloc',\
                  system,'system',\
                  strlen,'strlen'

   import kernel,\
                  GetCommandLineA, 'GetCommandLineA',\
                  CreateFileA,'CreateFileA',\
                  ReadFile,'ReadFile',\
                  CloseHandle,'CloseHandle'
